const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Function to generate a unique IGR number
const generateUniqueIgrNumber = async () => {
    const year = new Date().getFullYear();
    let igrNumber;

    while (true) {
        const igrCount = await prisma.incomingGoodReceipt.count({
            where: {
                igrNumber: {
                    startsWith: `IGR-${year}`
                }
            }
        });

        igrNumber = `IGR-${(igrCount + 1).toString().padStart(4, '0')}-${year}`;

        // Check if the generated number is unique
        const existingIgr = await prisma.incomingGoodReceipt.findUnique({
            where: { igrNumber }
        });

        if (!existingIgr) break;
    }

    return igrNumber;
};

const approvePurchaseOrder = async (req, res) => {
    const { purchaseOrderId } = req.params;
    const approverId = req.user.id;

    if (!purchaseOrderId) {
        return res.status(400).json({
            message: "Purchase order ID is required"
        });
    }

    try {
        const user = await prisma.user.findUnique({
            where: { id: approverId },
            select: {
                signature: true,
                role: true
            }
        });

        if (!user.signature) {
            return res.status(400).json({
                message: "You need to have a signature registered to approve purchase orders"
            });
        }

        const purchaseOrder = await prisma.purchaseOrder.findUnique({
            where: {
                idPurchaseOrder: purchaseOrderId
            },
            include: {
                approvals: true,
                purchaseOrderItems: {
                    include: {
                        itemRequest: true
                    }
                }
            }
        });

        if (!purchaseOrder) {
            return res.status(404).json({ message: "Purchase order not found" });
        }

        // Check if the purchase order is already fully approved
        if (purchaseOrder.status === 'FULLY_APPROVED') {
            return res.status(400).json({
                message: "This purchase order is already fully approved and cannot be approved further"
            });
        }

        const hasApproved = purchaseOrder.approvals.some(
            approval => approval.approvedById === approverId
        );

        if (hasApproved) {
            return res.status(400).json({
                message: "You have already approved this purchase order"
            });
        }

        const result = await prisma.$transaction(async (prisma) => {
            const approval = await prisma.pOApproval.create({
                data: {
                    purchaseOrderId,
                    approvedById: approverId,
                    signature: user.signature,
                }
            });

            const approvalCount = await prisma.pOApproval.count({
                where: { purchaseOrderId }
            });

            let status = 'PENDING';
            if (approvalCount >= 3) {
                status = 'FULLY_APPROVED';

                for (const poItem of purchaseOrder.purchaseOrderItems) {
                    if (poItem.itemRequestId) {
                        await prisma.itemRequest.update({
                            where: { id: poItem.itemRequestId },
                            data: { itemRequestStatus: 'IN_PROGRESS' }
                        });
                    }
                }
            } else if (approvalCount > 0) {
                status = 'PARTIALLY_APPROVED';
            }

            const updatedPO = await prisma.purchaseOrder.update({
                where: { idPurchaseOrder: purchaseOrderId },
                data: { status }
            });

            if (status === 'FULLY_APPROVED') {
                const igrNumber = await generateUniqueIgrNumber();

                const igr = await prisma.incomingGoodReceipt.create({
                    data: {
                        igrNumber,
                        purchaseOrderId,
                        remarks: purchaseOrder.purchaseOrderRemark,
                        items: {
                            create: purchaseOrder.purchaseOrderItems.map(item => ({
                                itemName: item.itemName,
                                itemCode: item.itemCode,
                                quantity: item.quantity
                            }))
                        }
                    },
                    include: {
                        items: true,
                        purchaseOrder: {
                            include: {
                                approvals: {
                                    include: {
                                        approvedBy: {
                                            select: {
                                                username: true,
                                                signature: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });

                return { updatedPO, approval, igr };
            }

            return { updatedPO, approval };
        });

        const message = result.igr ?
            "Purchase order fully approved, IGR created, and item requests updated to IN_PROGRESS" :
            `Purchase order approval added successfully (${purchaseOrder.approvals.length + 1}/3 approvals)`;

        res.status(200).json({
            message,
            data: result
        });

    } catch (error) {
        console.error('Error in purchase order approval:', error);
        res.status(500).json({
            message: 'Error processing purchase order approval',
            error: error.message
        });
    }
};

const markIGRItemsReceived = async (req, res) => {
    const { igrId, items } = req.body;
    const staffId = req.user.id;

    if (!igrId || !items || !Array.isArray(items)) {
        return res.status(400).json({
            message: "IGR ID and items array are required"
        });
    }

    try {
        const igr = await prisma.incomingGoodReceipt.findUnique({
            where: { id: igrId },
            include: {
                items: true
            }
        });

        if (!igr) {
            return res.status(404).json({ message: "IGR not found" });
        }

        if (igr.status === 'FULLY_APPROVED') {
            return res.status(400).json({
                message: "This IGR is already fully approved and cannot be modified"
            });
        }

        const result = await prisma.$transaction(async (prisma) => {
            // Update each item's received status
            const updatePromises = items.map(item =>
                prisma.iGRItem.update({
                    where: { id: item.itemId },
                    data: {
                        isReceived: item.isReceived,
                    }
                })
            );

            const updatedItems = await Promise.all(updatePromises);

            // Check if all items are received
            const allItemsReceived = updatedItems.every(item => item.isReceived);

            // Update IGR status if all items are received
            if (allItemsReceived) {
                await prisma.incomingGoodReceipt.update({
                    where: { id: igrId },
                    data: { status: 'ITEMS_RECEIVED' }
                });
            }

            return updatedItems;
        });

        res.status(200).json({
            message: "Items status updated successfully",
            data: result
        });

    } catch (error) {
        console.error('Error in marking IGR items:', error);
        res.status(500).json({
            message: 'Error processing IGR items update',
            error: error.message
        });
    }
};




module.exports = {
    approvePurchaseOrder,
    markIGRItemsReceived,
    //approveIGR,
    // getIGRList,
    // getIGRDetails
};



// const addItemsToPurchaseOrder = async (req, res) => {
//     const { purchaseOrderId, items, purchaseOrderRemark } = req.body;

//     try {
//         // Validate purchase order exists
//         const existingPO = await prisma.purchaseOrder.findUnique({
//             where: { idPurchaseOrder: purchaseOrderId }
//         });

//         if (!existingPO) {
//             return res.status(404).json({
//                 message: "Purchase order not found"
//             });
//         }

//         // Fetch suppliers and validate they exist
//         const suppliers = await Promise.all(
//             [...new Set(items.map(item => item.supplierName))].map(supplierName =>
//                 prisma.supplier.findUnique({
//                     where: { supplierName: supplierName }
//                 })
//             )
//         );

//         if (suppliers.some(supplier => !supplier)) {
//             return res.status(404).json({
//                 message: "One or more suppliers not found"
//             });
//         }

//         // Validate and process items
//         const itemsWithPrices = await Promise.all(
//             items.map(async (item) => {
//                 // Validate the supplier exists
//                 const supplier = await prisma.supplier.findUnique({
//                     where: { supplierName: item.supplierName }
//                 });

//                 // Validate the item exists for the supplier
//                 const supplierItem = await prisma.supplierItem.findFirst({
//                     where: {
//                         supplierId: supplier.idSupplier,
//                         item: {
//                             itemCode: item.itemCode
//                         }
//                     },
//                     include: {
//                         item: true
//                     }
//                 });

//                 if (!supplierItem) {
//                     throw new Error(`Item ${item.itemCode} not found for supplier ${item.supplierName}`);
//                 }

//                 // Calculate total price using manually input unit price
//                 const unitPrice = item.unitPrice;
//                 const totalPrice = (parseFloat(unitPrice) * item.quantity).toFixed(2);

//                 return {
//                     quantity: item.quantity,
//                     unitPrice: unitPrice,
//                     totalPrice: totalPrice,
//                     itemName: supplierItem.item.itemName,
//                     itemCode: supplierItem.item.itemCode,
//                     supplierName: item.supplierName,
//                     itemRequestId: item.itemRequestId || null
//                 };
//             })
//         );

//         // Group items by supplier and calculate totals
//         const { supplierGroups, supplierTotals, totalPOAmount } = calculatePrices(itemsWithPrices);

//         // Create purchase order items
//         const purchaseOrderItems = itemsWithPrices.map(item => ({
//             itemName: item.itemName,
//             itemCode: item.itemCode,
//             quantity: item.quantity,
//             unitPrice: item.unitPrice,
//             totalPrice: item.totalPrice,
//             supplierName: item.supplierName,
//             supplierTotal: supplierTotals[item.supplierName].toFixed(2).toString(),
//             itemRequest: item.itemRequestId ? {
//                 connect: { id: item.itemRequestId }
//             } : undefined
//         }));

//         // Update purchase order with items, total, and remark
//         const updatedPO = await prisma.purchaseOrder.update({
//             where: { idPurchaseOrder: purchaseOrderId },
//             data: {
//                 totalAmount: totalPOAmount.toFixed(2).toString(),
//                 purchaseOrderRemark: purchaseOrderRemark,
//                 purchaseOrderItems: {
//                     create: purchaseOrderItems
//                 }
//             },
//             include: {
//                 purchaseOrderItems: {
//                     orderBy: {
//                         supplierName: 'asc'
//                     }
//                 },
//                 requestPurchase: {
//                     include: {
//                         itemRequests: true
//                     }
//                 }
//             }
//         });

//         // Format response with supplier groups
//         const groupedResponse = {
//             ...updatedPO,
//             supplierGroups: Object.entries(supplierGroups).map(([supplierName, items]) => ({
//                 supplierName,
//                 totalAmount: supplierTotals[supplierName].toFixed(2).toString(),
//                 items: items
//             })),
//             totalPOAmount: totalPOAmount.toFixed(2).toString()
//         };

//         res.status(200).json({
//             message: "Items added to purchase order successfully",
//             purchaseOrder: groupedResponse
//         });

//     } catch (error) {
//         console.error('Error adding items to purchase order:', error);
//         res.status(500).json({
//             message: 'Error adding items to purchase order',
//             error: error.message
//         });
//     }
// };

// Helper function to get supplier items for a specific supplier


const getPendingRequestPurchases = async (req, res) => {
    try {
        const pendingRequests = await prisma.requestPurchase.findMany({
            where: {
                purchaseOrder: null
            },
            include: {
                itemRequests: true,
                user: {
                    select: {
                        username: true
                    }
                }
            }
        });

        res.status(200).json(pendingRequests);
    } catch (error) {
        console.error('Error getting pending requests:', error);
        res.status(500).json({ message: 'Error getting pending requests' });
    }
};

// Get all purchase orders without items (pending input)
const getPurchaseOrdersWithoutItems = async (req, res) => {
    try {
        const purchaseOrders = await prisma.purchaseOrder.findMany({
            where: {
                purchaseOrderItems: {
                    none: {} // This means no purchase order items exist
                }
            },
            select: {
                idPurchaseOrder: true,
                purchaseOrderNumber: true,
                requestPurchase: {
                    select: {
                        requestCode: true,
                        user: {
                            select: {
                                username: true
                            }
                        }
                    }
                },
                createdBy: {
                    select: {
                        username: true
                    }
                },
                status: true,
                totalAmount: true,
                createdAt: true
            },
            orderBy: {
                createdAt: 'desc'
            }
        });

        const formattedPurchaseOrders = purchaseOrders.map(po => ({
            idPurchaseOrder: po.idPurchaseOrder,
            purchaseOrderNumber: po.purchaseOrderNumber,
            requestCode: po.requestPurchase?.requestCode || '-',
            requestedBy: po.requestPurchase?.user?.username || '-',
            createdBy: po.createdBy.username,
            status: po.status,
            totalAmount: po.totalAmount,
            createdAt: po.createdAt
        }));

        res.status(200).json(formattedPurchaseOrders);
    } catch (error) {
        console.error('Error getting purchase orders without items:', error);
        res.status(500).json({ message: 'Error getting purchase orders without items' });
    }
};
